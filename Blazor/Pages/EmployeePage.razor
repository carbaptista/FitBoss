@page "/employee/{Id}"
@using Domain.Enums;
@using Domain.Request_Models.Employee;
@using FitBoss.Domain.Entities;
@using System.Text;
@using global::Shared;
@attribute [Authorize(Roles = "Manager")]
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager NavManager

<h3 class="mt-5 ms-5">Editar Funcionário</h3>
<hr />

@if (Employee is not null)
{
    <EditForm Model="EditModel" OnValidSubmit="Save" class="px-5">
        <DataAnnotationsValidator />
        <div class="row g-3 mb-3">
            <div class="col">
                <label for="EditModel.Name" class="form-label"><b>Nome</b></label>
                <InputText @bind-Value="EditModel.Name" class="form-control" />
                <ValidationMessage For="@(() => EditModel.Name)" />
            </div>
            <div class="col">
                <label for="Employee.Email" class="form-label"><b>Email address</b></label>
                <InputText @bind-Value="Employee.Email" class="form-control" disabled />
            </div>
        </div>

        <div class="row g-3 mb-3">
            <div class="col">
                <label for="EditModel.Branch" class="form-label"><b>Unidade</b></label>
                <InputText @bind-Value="EditModel.Branch" class="form-control" />
                <ValidationMessage For="@(() => EditModel.Branch)" />
            </div>
            <div class="col">
                <label for="Employee.PhoneNumber" class="form-label"><b>Telefone</b></label>
                <InputText @bind-Value="Employee.PhoneNumber" class="form-control" disabled/>
            </div>
        </div>

        <div class="row g-3 mb-3">

            <div class="col">
                <label for="EditModel.BaseSalary" class="form-label"><b>Salário Base</b></label>
                <InputNumber @bind-Value="EditModel.BaseSalary" class="form-control" />
                <ValidationMessage For="@(() => EditModel.BaseSalary)" />
            </div>
            <div class="col">
                <label for="EditModel.SalaryModifier" class="form-label"><b>Bônus</b></label>
                <InputNumber @bind-Value="EditModel.SalaryModifier" class="form-control" />
                <ValidationMessage For="@(() => EditModel.SalaryModifier)" />
            </div>
        </div>

        <div class="row g-3 mb-3">
            <div class="col">
                <label for="EditModel.Type" class="form-label"><b>Cargo</b></label>
                <InputSelect @bind-Value="EditModel.Type" class="form-select">
                    @foreach (var type in Enum.GetValues<EmployeeType>())
                    {
                        <option value="@type">@type</option>
                    }
                </InputSelect>
            </div>
            <div class="col mb-3">
                <label for="EditModel.HiredDate" class="form-label"><b>Contratado em</b></label>
                <InputDate @bind-Value="EditModel.HiredDate" class="form-control" />
                <ValidationMessage For="@(() => EditModel.HiredDate)" />
            </div>
        </div>
        <div class="mb-3">
            <span class="text-success">@SuccessMessage</span>
        </div>
        <div class="mb-3">
            <span class="text-danger">@ErrorMessage</span>
        </div>
        <button type="submit" class="btn btn-primary">
            <div class="spinner-border spinner-border-sm @LoadingClass" role="status">
                <span class="visually-hidden"></span>
            </div>
            Salvar
        </button>
    </EditForm>
}


@code {
    [Parameter] public string Id { get; set; } = "";
    public ResultDto? Result { get; set; }
    public Employee? Employee { get; set; }
    public EditEmployeeModel EditModel { get; set; } = new();
    private string? ErrorMessage { get; set; }
    private string? SuccessMessage { get; set; }
    private string LoadingClass = "d-none";

    protected override async Task OnInitializedAsync()
    {
        Result = await HttpClient.GetFromJsonAsync<ResultDto>($"employees/id/{Id}");
        var authState = await AuthProvider.GetAuthenticationStateAsync();

        var userName = authState.User.Identity?.Name;

        var loggedInUserResult = await HttpClient.GetFromJsonAsync<ResultDto>($"employees/username/{userName}");
        var loggedInUser = loggedInUserResult?.data;

        //if(loggedInUser is null)
        //{
        //    NavManager.NavigateTo("login");
        //}

        if (Result is null || Result.data is null)
        {
            ErrorMessage = "Erro ao carregar o funcionário";
            return;
        }

        Employee = Result.data;
        EditModel.Id = Id;
        EditModel.UpdatedBy = loggedInUser!.Id;
        EditModel.Name = Result.data.Name;
        EditModel.Type = Result.data.Type ?? EmployeeType.Trainer;
        EditModel.BaseSalary = Result.data.BaseSalary;
        EditModel.SalaryModifier = Result.data.SalaryModifier;
        EditModel.HiredDate = Result.data.HiredDate;
        EditModel.Branch = Result.data.Branch;

        StateHasChanged();
    }

    public async Task Save()
    {
        LoadingClass = "";
        SuccessMessage = "";
        var content = JsonContent.Create(EditModel);
        var response = await HttpClient.PatchAsync("employees/update", content);

        var parsedResponse = await response.Content.ReadFromJsonAsync<EmployeeEditResult>();

        LoadingClass = "d-none";
        if (parsedResponse is not null && parsedResponse.succeeded)
        {
            SuccessMessage = "Funcionário atualizado com sucesso";
        }
        else if (parsedResponse is not null && !parsedResponse.succeeded)
        {
            ErrorMessage = "Ocorrou um erro";
        }
    }

    public class ResultDto
    {
        public Employee? data { get; set; }
        public string? messages { get; set; }
        public bool succeeded { get; set; }
        public Exception? exception { get; set; }
        public int code { get; set; }
    }
}
