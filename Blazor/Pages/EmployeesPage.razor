@page "/employees"
@using Domain.Enums;
@using Application.Helpers;
@using FitBoss.Domain.Entities;
@attribute [Authorize]
@inject NavigationManager NavManager
@inject HttpClient HttpClient

<h3 class="text-dark">Funcion치rios</h3>
<form @onsubmit="Search" class="d-flex flex-row justify-content-start">
    <div class="input-group mb-3">
        <InputText @bind-Value="@SearchString" class="form-control" placeholder="Buscar pelo nome" />
        <button class="btn btn-primary" type="submit">Buscar</button>
    </div>
</form>



<div class="table-wrapper">
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Nome</th>
                <th scope="col">Cargo</th>
                <th scope="col">Unidade</th>
                <th scope="col">Editar</th>
            </tr>
        </thead>
        <tbody>
            @if (Result is not null && Result.data is not null)
            {
                @foreach (var item in Result.data)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Type</td>
                        <td>@item.Branch</td>
                        <td>
                            <a role="button" @onclick="@(() => GoToEmployee(item.Id))">
                                <i id="@item.Id" class="bi bi-pencil-fill text-center" style="cursor: pointer"></i>
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (Pages is not null)
{
    <nav class="mt-5 d-flex justify-content-center">
        <ul class="pagination">
            @foreach (var pageItem in Pages)
            {
                if (pageItem.ToString() == "...")
                {
                    <li class="page-item"><a class="page-link" disabled>@pageItem</a></li>
                }
                else
                {
                    <li class="page-item @((int)pageItem == Page ? ActiveClass : "")" style="cursor: pointer">
                        <a class="page-link" @onclick="@(() => PageChanged((int)@pageItem))">@pageItem</a>
                    </li>
                }
            }
        </ul>
    </nav>
}

@code {
    private ResultDto? Result { get; set; }
    public bool IsLoading { get; set; }
    private string? ErrorMessage { get; set; }
    private int Page { get; set; } = 1;
    private int PageSize { get; set; }
    private int Count { get; set; }
    private List<object>? Pages { get; set; }
    private string ActiveClass = "active";
    private string? SearchString { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Result = await HttpClient.GetFromJsonAsync<ResultDto>($"employees/{Page}");
        if (Result is null)
        {
            ErrorMessage = "Erro ao carregar funcion치rios";
            return;
        }

        var paginationResult = PaginationHelper.Paginate(Result.currentPage, Result.totalPages);
        Page = Result.currentPage;
        Count = Result.totalCount;
        if (paginationResult is not null)
            Pages = paginationResult.Items;

        StateHasChanged();
    }

    public async Task PageChanged(int page)
    {
        Result = await HttpClient.GetFromJsonAsync<ResultDto>($"employees/{page}");
        if (Result is null)
        {
            ErrorMessage = "Erro ao carregar funcion치rios";
            return;
        }

        var paginationResult = PaginationHelper.Paginate(Result.currentPage, Result.totalPages);
        Page = Result.currentPage;
        Count = Result.totalCount;
        if (paginationResult is not null)
            Pages = paginationResult.Items;

        StateHasChanged();
    }

    public async Task Search()
    {
        if (string.IsNullOrEmpty(SearchString))
        {
            await PageChanged(1);
            return;
        }

        Result = await HttpClient.GetFromJsonAsync<ResultDto>($"employees/name/{SearchString}");

        if (Result is null)
        {
            ErrorMessage = "Erro ao carregar funcion치rios";
            return;
        }

        var paginationResult = PaginationHelper.Paginate(Result.currentPage, Result.totalPages);
        Page = Result.currentPage;
        Count = Result.totalCount;
        if (paginationResult is not null)
            Pages = paginationResult.Items;

        StateHasChanged();
    }

    public void GoToEmployee(string id)
    {
        NavManager.NavigateTo($"/employee/{id}");
    }

    public class ResultDto
    {
        public IEnumerable<Employee>? data { get; set; }
        public string? messages { get; set; }
        public bool succeeded { get; set; }
        public Exception? exception { get; set; }
        public int code { get; set; }
        public int currentPage { get; set; }
        public int totalPages { get; set; }
        public int totalCount { get; set; }
        public int pageSize { get; set; }
    }
}
