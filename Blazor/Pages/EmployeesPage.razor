@page "/employees"
@using Blazored.LocalStorage;
@using Domain.Enums;
@using Application.Helpers;
@using Domain.Request_Models.Employee;
@using FitBoss.Domain.Entities;
@attribute [Authorize]
@inject NavigationManager NavManager
@inject HttpClient HttpClient
@inject AuthenticationStateProvider AuthProvider
@inject ILocalStorageService LocalStorage

<PageTitle>Funcionários - FitBoss</PageTitle>

<h3 class="text-dark">
    Funcionários
    @if (ErrorMessage is not null)
    {
        <span class="text-danger" style="font-size: 1rem !important;">@ErrorMessage</span>
    }
</h3>
<div class="d-flex justify-content-start align-items-baseline">
    <form @onsubmit="Search" class="col-6 me-3">
        <div class="input-group mb-3">
            <InputText @bind-Value="@SearchString" class="form-control" placeholder="Buscar pelo nome" />
            <button class="btn btn-primary" type="submit">Buscar</button>
        </div>
    </form>

    <Button Color="Color.Primary" Clicked="@ShowModal">Criar</Button>
</div>

<div class="table-wrapper">
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">Nome</th>
                <th scope="col">Cargo</th>
                <th scope="col">Unidade</th>
                <th scope="col">Editar</th>
            </tr>
        </thead>
        <tbody>
            @if (Result is not null && Result.data is not null)
            {
                @foreach (var item in Result.data)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.Type</td>
                        <td>@item.Branch</td>
                        <td>
                            <a role="button" @onclick="@(() => GoToEmployee(item.Id))">
                                <i id="@item.Id" class="bi bi-pencil-fill text-center" style="cursor: pointer"></i>
                            </a>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
</div>

@if (Pages is not null)
{
    <nav class="mt-5 d-flex justify-content-center">
        <ul class="pagination">
            @foreach (var pageItem in Pages)
            {
                if (pageItem.ToString() == "...")
                {
                    <li class="page-item"><a class="page-link" disabled>@pageItem</a></li>
                }
                else
                {
                    <li class="page-item @((int)pageItem == Page ? ActiveClass : "")" style="cursor: pointer">
                        <a class="page-link" @onclick="@(() => PageChanged((int)@pageItem))">@pageItem</a>
                    </li>
                }
            }
        </ul>
    </nav>
}

<Modal @ref="modalRef">
    <ModalContent Centered>
        <EditForm Model="CreateModel" OnValidSubmit="@CreateEmployee">
            <DataAnnotationsValidator />
            @if(CreationErrorMessages.Count > 0)
            {
                @foreach (var message in CreationErrorMessages)
                {
                    <li><span class="text-danger">@message</span></li>
                }
            }
            <ModalHeader>
                <ModalTitle>Criar funcionário</ModalTitle>
                <CloseButton />
            </ModalHeader>
            <ModalBody>
                <Field class="mb-3">
                    <FieldLabel For="@CreateModel.Name">Nome</FieldLabel>
                    <InputText class="form-control" @bind-Value="@CreateModel.Name" />
                    <ValidationMessage For=@(() => CreateModel.Name) />
                </Field>
                <Field class="mb-3">
                    <FieldLabel For="@CreateModel.UserName">Nome de usuário</FieldLabel>
                    <InputText class="form-control" @bind-Value="@CreateModel.UserName" />
                    <ValidationMessage For=@(() => CreateModel.UserName) />
                </Field>
                <Field class="mb-3">
                    <FieldLabel For="@CreateModel.Email">Email</FieldLabel>
                    <InputText class="form-control" @bind-Value="@CreateModel.Email" />
                    <ValidationMessage For=@(() => CreateModel.Email) />
                </Field>
                <Field class="mb-3">
                    <FieldLabel For="@CreateModel.Password">Senha</FieldLabel>
                    <InputText type="password" class="form-control" @bind-Value="@CreateModel.Password" />
                    <ValidationMessage For=@(() => CreateModel.Password) />
                </Field>
                <InputText type="hidden" @bind-Value="@CreateModel.CreatorId" />
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="@HideModal">Fechar</Button>
                <button type="submit" class="btn btn-primary">Salvar</button>
            </ModalFooter>
        </EditForm>
    </ModalContent>
</Modal>

@code {
    private ResultDto? Result { get; set; }
    public bool IsLoading { get; set; }
    private string? ErrorMessage { get; set; }
    private List<string> CreationErrorMessages { get; set; } = new();
    private int Page { get; set; } = 1;
    private int PageSize { get; set; }
    private int Count { get; set; }
    private List<object>? Pages { get; set; }
    private string ActiveClass = "active";
    private string? SearchString { get; set; }
    private Modal modalRef = new();
    private CreateEmployeeModel CreateModel = new();

    protected override async Task OnInitializedAsync()
    {
        Result = await HttpClient.GetFromJsonAsync<ResultDto>($"employees/{Page}");
        if (Result is null)
        {
            ErrorMessage = "Erro ao carregar funcionários";
            return;
        }

        var paginationResult = PaginationHelper.Paginate(Result.currentPage, Result.totalPages);
        Page = Result.currentPage;
        Count = Result.totalCount;
        if (paginationResult is not null)
            Pages = paginationResult.Items;

        CreateModel.CreatorId = await LocalStorage.GetItemAsync<string>("loggedInUserId");
        StateHasChanged();
    }

    public async Task PageChanged(int page)
    {
        Result = await HttpClient.GetFromJsonAsync<ResultDto>($"employees/{page}");
        if (Result is null)
        {
            ErrorMessage = "Erro ao carregar funcionários";
            return;
        }

        var paginationResult = PaginationHelper.Paginate(Result.currentPage, Result.totalPages);
        Page = Result.currentPage;
        Count = Result.totalCount;
        if (paginationResult is not null)
            Pages = paginationResult.Items;

        StateHasChanged();
    }

    public async Task Search()
    {
        Pages = null;
        if (string.IsNullOrEmpty(SearchString))
        {
            await PageChanged(1);
            return;
        }

        Result = await HttpClient.GetFromJsonAsync<ResultDto>($"employees/name/{SearchString}");
        if (Result is null)
        {
            ErrorMessage = "Nenhum funcionário encontrado";
            return;
        }

        ErrorMessage = null;
        var paginationResult = PaginationHelper.Paginate(Result.currentPage, Result.totalPages);
        Page = Result.currentPage;
        Count = Result.totalCount;
        if (paginationResult is not null)
            Pages = paginationResult.Items;

        StateHasChanged();
    }

    public void GoToEmployee(string id)
    {
        NavManager.NavigateTo($"/employee/{id}");
    }

    private async Task CreateEmployee()
    {
        var content = JsonContent.Create(CreateModel);
        var response = await HttpClient.PostAsync("employees/create", content);

        var parsedResponse = await response.Content.ReadFromJsonAsync<CreationResultDto>();

        if (!response.IsSuccessStatusCode)
        {
            CreationErrorMessages = parsedResponse!.messages!;
            return;
        }

        NavManager.NavigateTo($"/employees/{parsedResponse!.data!.Id}");
    }

    private async Task ShowModal()
    {
        await modalRef.Show();
    }

    private async Task HideModal()
    {
        await modalRef.Hide();
    }

    public class ResultDto
    {
        public IEnumerable<Employee>? data { get; set; }
        public string? messages { get; set; }
        public bool succeeded { get; set; }
        public Exception? exception { get; set; }
        public int code { get; set; }
        public int currentPage { get; set; }
        public int totalPages { get; set; }
        public int totalCount { get; set; }
        public int pageSize { get; set; }
    }

    public class CreationResultDto
    {
        public Employee? data { get; set; }
        public List<string>? messages { get; set; }
        public bool succeeded { get; set; }
        public Exception? exception { get; set; }
        public int code { get; set; }
    }
}
